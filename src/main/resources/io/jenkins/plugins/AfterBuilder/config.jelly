<?jelly escape-by-default='true'?>
<j:jelly xmlns:j="jelly:core"
         xmlns:f="/lib/form"
         xmlns:st="jelly:stapler"
         xmlns:l="/lib/layout"
>
    <st:bind var="it" value="${instance}">
    </st:bind>
    <st:bind var="backend" value="${descriptor}"/>
    <div class="alert alert-info">
        如回显的数据为UUID格式，代表系他人已填写，且当前人员无对应项目信息获取权限，请勿修改。
        <br/>不同人员修改回填信息时，最好切换下测试项目和测试轮次后再进行保存。
        <b>如操作异常，请将执行报告发送给管理员手工处理。</b>
    </div>
    <f:entry title="测试报告类型选择"
             field="reportEntry"
             description="请选择构建产生的报告对应的类型，否则无法正常解析执行结果（请参考本配置项右侧帮助信息）。不要修改对应框架的报告导出目录。">
        <f:radio name="reportType" title="JUnit" value="junit" checked="${instance.isReportCheck('junit')}"/>
        <f:radio name="reportType" title="TestNG" value="testng" checked="${instance.isReportCheck('testng')}"/>
        <f:radio name="reportType" title="Pytest" value="pytest" checked="${instance.isReportCheck('pytest')}"/>
        <f:radio name="reportType" title="Allure" value="allure" checked="${instance.isReportCheck('allure')}"/>
        <f:radio name="reportType" title="Robot Framework" value="robot" checked="${instance.isReportCheck('robot')}"/>
    </f:entry>
    <f:entry title="请选择测试平台项目">
        <f:select id="testproj" field="testProject" onfocus="setupData()"/>
    </f:entry>
    <f:entry title="请选择测试轮次">
        <f:select id="testcycle" field="testCycle"/>
    </f:entry>
    <f:entry title="用例回填模式">
        <f:select field="fillMode"/>
    </f:entry>
    <div class="jenkins-!-margin-1">
        <f:checkbox title="${%回填时发送邮件}" field="sendMail"/>
    </div>
    <f:entry title="缺省回填设置" description="构建时，如非用户手动发起（定时任务、 Webhook 等无法获取 Build 发起人的场景），适用下列配置（确保该人员有上述测试项目权限）。">
        <div class="dropdownList-container jenkins-!-margin-1">

        <f:entry title="缺省回填人员名">
            <f:textbox field="defaultRecorder"/>
        </f:entry>

            <f:checkbox title="${%触发缺省回填时，该人员接收流水线邮件}" field="sendDefaultMail"/>
            <p style="color:var(--warning-color)">
                <l:icon src="symbol-rss" class="icon-sm"/>
                如需晾晒定时流水线数据，建议开启接收邮件；其他场景建议关闭。
            </p>
        </div>
    </f:entry>

    <script>
        function getExistedValueKey(val, d) {
            // 判断value是否在d内
            for (let key in d) {
                if (d[key] === val) {
                    return key
                }
            }
            return null
        }

        function checkAlreadyHasData(selector) {
            let ele = document.querySelector(selector);
            let childCount = ele["childElementCount"];
            return childCount > 0
        }

        function createOption(name, value) {
            let opt = document.createElement('option');
            opt.innerHTML = name;
            opt.value = value;
            return opt
        }

        function modifyTestCycleOption() {
            // 更换人员信息时，重置Select
            let testCycle = document.querySelector("#testcycle")
            let selectValue = document.querySelector("#testcycle").getAttribute('value');
            let subEle = document.querySelector("#testcycle").querySelectorAll('option');
            let matched = false;
            for (const key of subEle.keys()) {
                if (subEle[key].getAttribute('value') === selectValue) {
                    matched = true
                    break
                }
            }
            if (!matched) {
                let unknownOption = document.createElement('option')
                unknownOption.value = selectValue;
                unknownOption.innerHTML = selectValue;
                testCycle.innerHTML = null;
                testCycle.appendChild(unknownOption)
                for (const entry of subEle.entries()) {
                    testCycle.append(entry[1])
                }
            }
            testCycle.value = selectValue
        }

        function setupData() {
            backend.fetchProjectId(function (obj) {
                if (checkAlreadyHasData('#testproj')) {
                    // 初始化过
                    return
                }
                modifyTestCycleOption()
                let testProjectHTMLElement = document.querySelector("#testproj");
                let savedProjectId = testProjectHTMLElement.getAttribute("value"); // 控件已保存的数据
                let backendResp = obj.responseObject();
                testProjectHTMLElement.innerHTML = null;
                let projectName = getExistedValueKey(savedProjectId, backendResp);
                if (projectName === null) {
                    // 已保存的数据不在获取到的测试项目列表内
                    let unknownOption = createOption(savedProjectId, savedProjectId); // unknown
                    testProjectHTMLElement.appendChild(unknownOption);
                    Object.keys(backendResp).forEach(function (e) {
                        testProjectHTMLElement.appendChild(createOption(e, backendResp[e]));
                    })
                } else {
                    // 删除响应内已有的数据，添加到列表框第一个
                    // delete backendResp[projectName]
                    // let tmpOption = createOption(projectName, savedProjectId)
                    // testProjectHTMLElement.appendChild(tmpOption)
                    Object.keys(backendResp).forEach(function (e) {
                        testProjectHTMLElement.appendChild(createOption(e, backendResp[e]));
                    })
                    testProjectHTMLElement.value = savedProjectId
                }


            })
        }

        document.addEventListener("DOMContentLoaded", function () {
            // 重新添加控件不会重新触发
            setTimeout(() => {
                setupData()
            }, 500)

        });
    </script>
</j:jelly>